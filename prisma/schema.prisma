generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Goal {
  id            String    @id @default(cuid())
  name          String
  targetAmount  Float
  currentAmount Float
  deadline      DateTime?
  status        String    @default("IN_PROGRESS")
  aiSuggestions String    @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
}

model Category {
  id                String             @id @default(cuid())
  name              String             @unique
  type              String?            // SAVING, INVESTMENT, DEBT (made optional)
  budget            Float?             // Optional budget amount for the category
  goals             Goal[]
  transactions      Transaction[]
  recurringExpenses RecurringExpense[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String
  categoryId  String
  date        DateTime
  type        String
  tags        String   @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bucket      String
  category    Category @relation(fields: [categoryId], references: [id])
}

model AIFunctionCall {
  id             String   @id @default(cuid())
  name           String
  parameters     String
  result         String?
  error          String?
  createdAt      DateTime @default(now())
  processingTime Int
}

model VoiceCommand {
  id             String   @id @default(cuid())
  rawText        String
  intent         String
  parameters     String
  success        Boolean
  createdAt      DateTime @default(now())
  processingTime Int
}

model RecurringExpense {
  id           String   @id @default(cuid())
  name         String
  amount       Float
  frequency    String   // DAILY, WEEKLY, MONTHLY, YEARLY
  nextDueDate  DateTime
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  bucket       String   // NEED, WANT, SAVING
  isAutomatic  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
